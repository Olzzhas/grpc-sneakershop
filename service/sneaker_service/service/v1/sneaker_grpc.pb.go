// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: service/sneaker_service/service/v1/sneaker.proto

package proto_sneaker_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SneakerService_GetSneakers_FullMethodName   = "/sneaker_service.service.SneakerService/GetSneakers"
	SneakerService_UpdateSneaker_FullMethodName = "/sneaker_service.service.SneakerService/UpdateSneaker"
)

// SneakerServiceClient is the client API for SneakerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SneakerServiceClient interface {
	GetSneakers(ctx context.Context, in *GetSneakersRequest, opts ...grpc.CallOption) (*GetSneakersResponse, error)
	UpdateSneaker(ctx context.Context, in *UpdateSneakerRequest, opts ...grpc.CallOption) (*UpdateSneakerResponse, error)
}

type sneakerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSneakerServiceClient(cc grpc.ClientConnInterface) SneakerServiceClient {
	return &sneakerServiceClient{cc}
}

func (c *sneakerServiceClient) GetSneakers(ctx context.Context, in *GetSneakersRequest, opts ...grpc.CallOption) (*GetSneakersResponse, error) {
	out := new(GetSneakersResponse)
	err := c.cc.Invoke(ctx, SneakerService_GetSneakers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sneakerServiceClient) UpdateSneaker(ctx context.Context, in *UpdateSneakerRequest, opts ...grpc.CallOption) (*UpdateSneakerResponse, error) {
	out := new(UpdateSneakerResponse)
	err := c.cc.Invoke(ctx, SneakerService_UpdateSneaker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SneakerServiceServer is the server API for SneakerService service.
// All implementations must embed UnimplementedSneakerServiceServer
// for forward compatibility
type SneakerServiceServer interface {
	GetSneakers(context.Context, *GetSneakersRequest) (*GetSneakersResponse, error)
	UpdateSneaker(context.Context, *UpdateSneakerRequest) (*UpdateSneakerResponse, error)
	mustEmbedUnimplementedSneakerServiceServer()
}

// UnimplementedSneakerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSneakerServiceServer struct {
}

func (UnimplementedSneakerServiceServer) GetSneakers(context.Context, *GetSneakersRequest) (*GetSneakersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSneakers not implemented")
}
func (UnimplementedSneakerServiceServer) UpdateSneaker(context.Context, *UpdateSneakerRequest) (*UpdateSneakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSneaker not implemented")
}
func (UnimplementedSneakerServiceServer) mustEmbedUnimplementedSneakerServiceServer() {}

// UnsafeSneakerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SneakerServiceServer will
// result in compilation errors.
type UnsafeSneakerServiceServer interface {
	mustEmbedUnimplementedSneakerServiceServer()
}

func RegisterSneakerServiceServer(s grpc.ServiceRegistrar, srv SneakerServiceServer) {
	s.RegisterService(&SneakerService_ServiceDesc, srv)
}

func _SneakerService_GetSneakers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSneakersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SneakerServiceServer).GetSneakers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SneakerService_GetSneakers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SneakerServiceServer).GetSneakers(ctx, req.(*GetSneakersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SneakerService_UpdateSneaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSneakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SneakerServiceServer).UpdateSneaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SneakerService_UpdateSneaker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SneakerServiceServer).UpdateSneaker(ctx, req.(*UpdateSneakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SneakerService_ServiceDesc is the grpc.ServiceDesc for SneakerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SneakerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sneaker_service.service.SneakerService",
	HandlerType: (*SneakerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSneakers",
			Handler:    _SneakerService_GetSneakers_Handler,
		},
		{
			MethodName: "UpdateSneaker",
			Handler:    _SneakerService_UpdateSneaker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/sneaker_service/service/v1/sneaker.proto",
}
